#!/usr/bin/env bash

currentRules=$(oci network route-table get --profile=${profile} --rt-id ${rt-id} | jq '.data."route-rules"')
# currentRules=$(cat <<EOF
# [
#   {
#     "cidr-block": null,
#     "description": null,
#     "destination": "0.0.0.0/0",
#     "destination-type": "CIDR_BLOCK",
#     "network-entity-id": "ocid1.internetgateway.oc1.eu-frankfurt-1...."
#   }
# ]
# EOF
# )

currentRulesJsonArryDestination=$( echo "$currentRules" | jq '.[] | .destination' | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g' )
currentRulesJsonArryDestinationType=$( echo "$currentRules" | jq '.[] | ."destination-type"' | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g' )
currentRulesJsonArryNetworkEntityId=$( echo "$currentRules" | jq '.[] | . "network-entity-id"' | sed -e 's/\[ //g' -e 's/\ ]//g' -e 's/\,//g' )

currentRulesBashArrayDestination=( $currentRulesJsonArryDestination )
currentRulesBashArrayDestinationType=( $currentRulesJsonArryDestinationType )
currentRulesBashArrayNetworkEntityId=( $currentRulesJsonArryNetworkEntityId )

for (( i = 0; i < $${#currentRulesBashArrayDestination[@]}; ++i )); do
  echo "[debug] destination: $currentRulesBashArrayDestination[i]"
  echo "        destination-type: $currentRulesBashArrayDestinationType[i]"
  echo "        network-entity-id: $currentRulesBashArrayNetworkEntityId[i]"
done

value="${cidr-block}"
if [[ ! " $${currentRulesBashArrayDestination[*]} " =~ " \"$value\" " ]]; then
  echo "[debug] Current rules do not contain $value. Adding rule for $value."
  currentRulesBashArrayDestination+=( \"$value\" )
  currentRulesBashArrayDestinationType+=( \"CIDR_BLOCK\" )
  currentRulesBashArrayNetworkEntityId+=( \"${peering-ocid}\" )
else
  echo "[debug] Current rules do already contain $value."
fi

function toJSON() {
  printf "[\n"
  length=$${#currentRulesBashArrayDestination[@]}
  for (( j=0; j<length-1; j++ ));
  do
    printf "  {\n"
    printf '    "destination": %s,\n' "$${currentRulesBashArrayDestination[$j]}"
    printf '    "destination-type": %s,\n' "$${currentRulesBashArrayDestinationType[$j]}"
    printf '    "network-entity-id": %s\n' "$${currentRulesBashArrayNetworkEntityId[$j]}"
    printf "  },\n"
  done
  printf "  {\n"
  printf '    "destination": %s,\n' "$${currentRulesBashArrayDestination[$length - 1]}"
  printf '    "destination-type": %s,\n' "$${currentRulesBashArrayDestinationType[$length - 1]}"
  printf '    "network-entity-id": %s\n' "$${currentRulesBashArrayNetworkEntityId[$length - 1]}"
  printf "  }\n"
  printf "]\n"
}

toJSON

updatedRulesJsonArray=$(toJSON | tr '\n' ' ')
updatedRulesJsonArrayWith=$(echo \'$updatedRulesJsonArray\')

updateCMD="oci network route-table update --profile=${profile} --rt-id ${rt-id} --route-rules $updatedRulesJsonArrayWith --force"
eval "$updateCMD"